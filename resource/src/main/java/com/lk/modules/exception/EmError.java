package com.lk.modules.exception;


/**
 * @author Qian
 */
@SuppressWarnings("AlibabaEnumConstantsMustHaveComment")
public enum EmError implements CommonError {
    //    ==================================================================================================================================
    //
    //    60000开始为货物运输小程序服务错误代码
    //
    //    ==================================================================================================================================
    WX_GOODS_PHONE_NOT_EXIST(60010, "手机号不存在！", "系统"),
    WX_GOODS_DRIVER_PHONE_NOT_EXIST(60009, "司机手机号不存在！", "系统"),
    WX_GOODS_PHONE_OCCUPY(60008, "手机号被占用！", "系统"),
    WX_GOODS_SAFE_PERSON_PHONE_NOT_EXIST(60007, "手机号不存在！", "系统"),
    WX_GOODS_DUPLICATE_SUBMIT(60006, "请勿重复提交！", "系统"),
    WX_GOODS_DEAL_WITH_FAIL(60005, "该报警处理失败，请联系管理员！", "系统"),
    WX_GOODS_ALARM_DEAL_WITH(60004, "该报警已被处理", "系统"),
    WX_GOODS_UNKNOWN_REQUEST(60003, "未知请求", "系统"),
    WX_GOODS_USER_BIND_FAIL(60002, "绑定失败", "系统"),
    WX_GOODS_USER_UNKNOWN(60001, "未知用户", "系统"),
    WX_GOODS_TOKEN_EXPIRED(60000, "令牌已过期，请重新登录", "系统"),


    //    ==================================================================================================================================
    //
    //    50000开始为管理系统服务错误代码
    //
    //    ==================================================================================================================================
    THIRD_PARTY_GET_UPLOAD_SIGNATURE_FAILED(50000, "获取上传签名失败", "三方服务"),

    //    ==================================================================================================================================
    //
    //    40000开始为管理系统服务错误代码
    //
    //    ==================================================================================================================================


    ADMIN_USER_NOT_LINK_COMPANY(40009, "当前用户没有关联公司", "管理服务"),

    ADMIN_GOVERNMENT_NOT_LINK_COMPANY(40008, "政府账户不可关联公司", "管理服务"),

    ADMIN_COMPANY_EXIST_USER(40007, "当前公司存在员工，不可删除", "管理服务"),

    ADMIN_USE_DICT_ERROR(40006, "当前字典已被使用", "管理服务"),

    ADMIN_BLOCK_DICT_ERROR(40005, "当前字典已被禁用", "管理服务"),

    ADMIN_LINK_USER_COMPANY_ERROR(40004, "当前公司已被账号关联", "管理服务"),

    ADMIN_OLD_PASSWORD_ERROR(40003, "老密码错误", "管理服务"),

    ADMIN_ROLE_EXIST(40002, "角色已存在", "管理服务"),

    ADMIN_ROLE_USE(40001, "角色正在被使用", "管理服务"),

    ADMIN_SETTING_PERMISSION_FAILED(40000, "设置权限失败", "管理服务"),


    //    ==================================================================================================================================
    //
    //    30000开始为xx系统服务错误代码
    //
    //    ==================================================================================================================================


    //    ==================================================================================================================================
    //
    //    20000开始为认证服务错误代码
    //
    //    ==================================================================================================================================

    AUTH_NOT_AGENT(20010, "权限错误！", "认证服务"),
    AUTH_USER_IS_BLOCK_LOGIN(20009, "您已被禁止登录", "认证服务"),
    AUTH_USER_IS_NULL(20008, "用户未注册", "认证服务"),
    AUTH_TOKEN_NOE_AGREE(20007, "请重新登录", "认证服务"),
    AUTH_TOKEN_INVALID(20006, "验证token无效", "认证服务"),
    AUTH_TOKEN_EXPIRED(20005, "令牌已过期，请重新登录", "认证服务"),
    AUTH_NOT_USER_DETAILS(20004, "不是UserDetails类型", "认证服务"),
    AUTH_API_NOT_PERMISSION(20003, "您没有访问该API的权限", "认证服务"),
    AUTH_PASSWORD_ERROR(20002, "账号或密码错误", "认证服务"),
    AUTH_CODE_EXPIRED(20001, "登录验证码已过期", "认证服务"),
    AUTH_CODE_ERROR(20000, "登录验证码错误", "认证服务"),


    //    ==================================================================================================================================
    //
    //    10000开始为系统内部错误代码
    //
    //    ==================================================================================================================================


    UNKNOWN_ERROR(10001, "未知异常", "未知服务");
    /**
     * 错误码
     */
    private int errCode;
    /**
     * 错误信息
     */
    private String errMsg;
    /**
     * 服务名
     */
    private String serviceName;

    EmError(int errCode, String errMsg, String serviceName) {
        this.errCode = errCode;
        this.errMsg = errMsg;
        this.serviceName = serviceName;
    }

    @Override
    public int getErrCode() {
        return this.errCode;
    }

    @Override
    public String getErrMsg() {
        return this.errMsg;
    }

    @Override
    public CommonError setErrMsg(String errMsg) {
        this.errMsg = errMsg;
        return this;
    }

}
